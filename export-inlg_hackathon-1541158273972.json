{"brains":[{"brain":{"threshold":70,"pauseTimeout":15,"brainId":"1cbda87a-c826-4d33-b651-9a9a2d2a456b","brainName":"flowai","title":"Untitled Brain","description":"Flow.ai","language":"nl","isDefault":true},"flows":[{"flowId":"a3d016ad-1524-457f-a8d8-e795414c4ca1","group":"Default","steps":[{"type":"UNKNOWN","title":"","contexts":[],"actions":[{"actionId":"e22c755b-26e9-440e-8ae4-69259097eeb3"}],"stepId":"b976506a-8584-449c-888d-6aae58535696","intent":{"intentId":"system.noise"}}],"title":"call_NLG","disabled":false}],"entities":[],"intents":[{"brainId":"1cbda87a-c826-4d33-b651-9a9a2d2a456b","intentId":"00400130-dc5a-454b-a486-6c2419fb4e90","accuracy":7.69,"examples":[{"entities":[],"query":"hello"}],"title":"hello"},{"brainId":"1cbda87a-c826-4d33-b651-9a9a2d2a456b","intentId":"system.noise","accuracy":53.84,"examples":[{"entities":[],"query":"dit komt vaak voor me uit de weg en ik snap de verhaallijn snel"},{"entities":[],"query":"daarom moet ik mezelf vaak dwingen de woorden te negeren die ik niet begrijp en op het verhaal te concentreren"},{"entities":[],"query":"ik heb soms problemen om met een boek te beginnen, maar als ik eenmaal in het verhaal ben, denk ik dat ik een mooie snelle lezer ben"},{"entities":[],"query":"Alligators kunnen geen muren beklimmen, dat is duidelijk een hagedis"},{"entities":[],"query":"Je weet wat ze zeggen over jetbrandstof"},{"entities":[],"query":"Dingle als een eerste level baas, zonder dat de snelheid wordt verhoogd, is erger dan Haunt"},{"entities":[],"query":"Voorzichtig, olie lekt soms uit plastic"},{"entities":[],"query":"Waarom kunnen we ook geen plaats hebben?"},{"entities":[],"query":"mijn hond zou er nog blijven, in de mond blijven"},{"entities":[],"query":"Voor de langste tijd heb ik eigenlijk gedacht dat zijn echte naam Ron Swanson was"},{"entities":[],"query":"Ze moeten een video maken genaamd laten we de spullen onder de wastafel drinken"},{"entities":[],"query":"Als het eigenlijk naar het noorden zou zijn, zou het niet zo'n grap zijn"},{"entities":[],"query":"Waarom oorlog voeren wanneer je een parachute kan dragen?"},{"entities":[],"query":"Leugenaar! Ik heb het origineel getekend. Op papier, natuurlijk"},{"entities":[],"query":"Om eerlijk te zijn, waren er nog geen balpennen aanwezig"},{"entities":[],"query":"asdasdsdfddssa"},{"entities":[],"query":"ik wil"},{"entities":[],"query":"ik ben"},{"entities":[],"query":"een"},{"entities":[],"query":"de"},{"entities":[],"query":"ik heb"},{"entities":[],"query":"vraag"}],"title":"unknown"}],"actions":[{"actionId":"e22c755b-26e9-440e-8ae4-69259097eeb3","brainId":"1cbda87a-c826-4d33-b651-9a9a2d2a456b","payload":{"integrationId":"2c91d139-33ff-4038-a6ec-75e33a3bf8b1","integrationName":"function","integrationTitle":"callBackend","tags":[]},"type":"ACTION"}]}],"integrations":[{"integrationId":"69d5a496-8104-402b-941c-07fb077e7851","integrationName":"function","actionName":"Pause Bot","cloudCode":"async payload => {\n  // Disable the bot for a number of minutes\n  // check the brain settings\n  toolbelt.pauseBot()\n}","title":"Pause Bot","description":"Cloud code","eventTypes":null},{"integrationId":"7ce791f7-9810-4f60-866d-e7524d22de88","integrationName":"function","actionName":"Takeover","cloudCode":"async payload => {\n  // Notify dashboard users to take over\n  // the conversation\n  toolbelt.takeover()\n}","title":"Takeover","description":"Cloud code","eventTypes":null},{"integrationId":"8f6d28f1-968e-45a4-89cb-039b3743306d","integrationName":"function","actionName":"Send takeover e-mail","cloudCode":"async payload => {\n  // Send an e-mail to notify a conversation\n  // needs to be taken over\n  toolbelt.email({\n    to: 'sander+demo@flow.ai',\n    template: 'takeover'\n  })\n}","title":"Send takeover e-mail","description":"Cloud code","eventTypes":null},{"integrationId":"3ba74115-abdc-4820-b5d0-f3c6984b2143","integrationName":"function","actionName":"newaction","cloudCode":"async payload => {\n\n  try {\n\n    // Make a GET call\n    // Check https://github.com/mzabriskie/axios for specifics\n    const result = await request.get('https://api.themoviedb.org/3/movie/popular?api_key=c9b5d6dbe9f5403c0b71b0bf6d0629ed')\n\n    const {\n      status,\n      data\n    } = result\n\n    // Check if we found movies\n    if(status !== 200 || !data || !data.results || !data.results.length) {\n      return reply(new Message('No popular movies found..'))\n    }\n\n    // Create a list for movie titles\n    const titles = []\n\n    // Create a card carousel\n    const carousel = new Carousel()\n\n    data.results.forEach((movie, idx) => {\n\n      if(idx >= 4) {\n        // Just 5 movies, skip the other\n        return\n      }\n\n      // Add the title to the list\n      titles.push(movie.title)\n\n      // Create a movie card\n      const card = new Card({\n        title: movie.title,\n        subtitle: movie.overview,\n        media: new Media({\n          type: 'image',\n          url: `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n        })\n      })\n\n      // Add the card to the carousel\n      carousel.addCard(card)\n    })\n\n    // Create a message with fallback speech\n    const message = new Message(`The most popular are ${titles.join(', ')}`)\n    message.addResponse(carousel)\n\n    // Send the popular movies\n    reply(message)\n  } catch(err) {\n    console.error(err)\n    // This is not good..\n    reply(new Message('Computer says no..'))\n  }\n}","title":"Untitled Code","description":"Cloud code","eventTypes":null},{"integrationId":"2c91d139-33ff-4038-a6ec-75e33a3bf8b1","integrationName":"function","actionName":"callBackend","cloudCode":"/**\n@param {object} payload - data and info\n@param {string} payload.channelName - type of channel\n@param {string} payload.query - what the user sends\n@param {object} payload.params - data detected by AI\n@param {object} payload.user - user that triggered the action\n@param {string} payload.user.name - name of the user\n@param {string} [payload.user.profile.firstName] - first name of the user\n@param {string} [payload.user.profile.lastName] - Last name of the user\n@param {string} [payload.user.profile.fullName] - first and last name combined\n@param {string} [payload.user.profile.picture] - profile picture\n@param {string} [payload.user.profile.locale] - user language\n@param {string} [payload.user.profile.gender] - user gender\n*/\n(async payload => {\n  try {\n    const URL='http://c0073a2e.ngrok.io'\n    let input = payload.query\n    const response = await request({ \n      method: 'POST',\n      url: URL,\n      headers: { \n         Accept: 'application/json',\n         'Content-Type': 'application/json'\n      },\n      data: { \n        'input': input\n      }\n    })\n\n    const {\n      status,\n      data\n    } = response\n  console.log(data)\n  \n  const text = new Text(data[\"output\"])\n  const message = new Message(`Could not connect to NLG backend.`)\n\n  message.addResponse(text)\n\n  return message\n\n  } catch(err) {\n    console.error('Something bad', err)\n  }\n})","title":"callBackend","description":"Cloud code","eventTypes":["actionEvent"]}]}